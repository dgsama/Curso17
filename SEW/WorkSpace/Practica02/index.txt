El tipo abstracto de dato (TAD) Racional se proporciona mediante una interfaz Java, especificando cada una de sus operaciones por medio de Javadoc. La documentación se ha generado para el ámbito package; es decir, desde el punto de vista del desarrollador.

Por analogía con los tipos numéricos predefinidos en Java, un tipo de dato para números racionales seguramente debería ser inmutable, en cuyo caso, el TAD Racional no debería incluir operaciones básicas modificadoras. Sin embargo, se ha preferido incluir una operación de este tipo, acumula, para que sea posible implementar tipos con distintas características: inmutables y mutables.

Para que la misma interfaz se pueda utilizar para realizar implementaciones de tipos de datos mutables y de tipos de datos inmutables, todas las operaciones modificadoras se implementan, por defecto, como operaciones no soportadas, tay como se indica en el cuadro adjunto.

La primera implementación del TAD Racional es un tipo de dato no modicable (o inmutable) dado por la clase RacionalNoMod.

Para almacenar la información de los valores racionales del tipo de dato, se utiliza un campo estático, elarray datos. Los racionales se almacenan en posiciones consecutivas del array, por lo que cada componente de éste es otro array de dos enteros, uno para el numerador y otro para el denominador de un racional. El número de racionales guardados en el array datos se mantiene el campo estático numRacionales.

Para representar un racional se utiliza un campo de tipo entero, rep. El valor de este campo es el número de componente del array datos en el que se almacena la información (numerador y denominador) de éste.

En la Figura 1 adjunta se muestra gráficamente cómo se almacenan los números racionales del tipo RacionalNoMod y cómo se representan éstos.

En este caso se va a realizar una implementación del TAD Racional, como un tipo de dato modificable (o mutable), el tipo de dato RacionalMod. Para simplificar la implementación se extenderá la clase RacionalNoMod.
